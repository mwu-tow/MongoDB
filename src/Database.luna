import Std.Base
import Std.Foreign
import Std.Foreign.C.Value

import MongoDB.Utils
import MongoDB.Collection
    
class Database:
    Database
    DatabaseVal (ManagedPointer None)
    
    def ptr: case self of
        DatabaseVal p: p
        Database: throw "Invalid database object, please use `Client.database`"

    # Pointer None -> Database
    def _fromPtr ptr:
        mongoc_database_destroy = mongoc "mongoc_database_destroy"
        case ptr.isNull of 
            True: throw "missing database"
            False: 
                DatabaseVal (managedPtr mongoc_database_destroy ptr)

    def name:
        nameCStr = mongoc "mongoc_database_get_name" . call (Pointer CChar) [self.ptr.toCArg]
        readTextUnownedFromCStr nameCStr.ptr
    def collectionNames:
        callMongohReturningTexts "mongoh_get_collection_names" [self.ptr.toCArg]
    def drop:
        callMongohReturningTrue "mongoh_database_drop" [self.ptr.toCArg]

    def collection name:
        collectionHandle = singleStringMethod self.ptr (Pointer None) (mongoc "mongoc_database_get_collection") name
        Collection._fromPtr collectionHandle

    def createCollection name:
        collectionHandle = singleStringMethod self.ptr (Pointer None) (mongoh "mongoh_database_create_collection") name
        if collectionHandle.isNull then reportError else Collection._fromPtr collectionHandle

    def hasCollection name:
        result = singleStringMethod self.ptr (CInt8) (mongoh "mongoh_has_collection") name
        reportIfError result
        
