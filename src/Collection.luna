import Std.Base
import Std.Foreign
import Std.Foreign.C.Value

import MongoDB.Utils
import MongoDB.Cursor

class RenamePolicy:
    DontDropTargetBeforeRename
    DropTargetBeforeRename
    def toCArg: 
        case self of
            DontDropTargetBeforeRename: CInt8.fromInt 0 . toCArg 
            DropTargetBeforeRename:     CInt8.fromInt 1 . toCArg

class UpdateResult:
    UpdateResult
    UpdateResultVal Int Int

    def matchedCount: case self of
        UpdateResultVal a _: a 
    def modifiedCount: case self of
        UpdateResultVal _ b: b 

    def _fromJsonReply result:
        reply = consumeExpectedJsonText result
        UpdateResultVal (reply.get "matchedCount" . asInt) (reply.get "modifiedCount" . asInt)

    def toJSON:
        JSONObject (Map.singleton "matchedCount" self.matchedCount.toJSON . insert "modifiedCount" self.modifiedCount.toJSON)
    def toText: self.toJSON.toText

# Named collection of documents, being a member of some database
class Collection:
    Collection
    CollectionVal (ManagedPointer None)

    def ptr: case self of
        CollectionVal p: p
        Collection: throw "Invalid collection object, please use `Database.collection`"

    def _fromPtr pointer:
        mongoc_collection_destroy = mongoc "mongoc_collection_destroy"
        CollectionVal (managedPtr mongoc_collection_destroy pointer)

    def aggregate pipelineJson:
        result = singleStringMethod self.ptr (Pointer None) (mongoh "mongoh_aggregate") pipelineJson.toText
        if result.isNull then reportError else cursorFromPointer result
            
    def count query:
        mongoh_int "mongoh_count" self.ptr [query]

    def drop:
        callMongohReturningTrue "mongoh_collection_drop" [self.ptr.toCArg]

    def name:
        nameCStr = mongoc "mongoc_collection_get_name" . call (Pointer CChar) [self.ptr.toCArg]
        readTextUnownedFromCStr nameCStr.ptr


    # Takes a JSON object -- a document being inserted into the collection
    def insertOne documentJson:
        result = singleStringMethod self.ptr (Pointer CChar) (mongoh "mongoh_insert_one") documentJson.toText
        case result.isNull of 
            True: reportError
            False: 
                print (consumeBsonStringToText result.ptr)

    def updateOne selector updates:
        result = twoStringMethod self.ptr (Pointer CChar) (mongoh "mongoh_update_one") selector.toText updates.toText
        UpdateResult._fromJsonReply result

    def updateMany selector updates:
        result = twoStringMethod self.ptr (Pointer CChar) (mongoh "mongoh_update_many") selector.toText updates.toText
        UpdateResult._fromJsonReply result

    # JSON -> [JSON]
    # returns all documents in collection that match given query
    def findAll query:
        mongoh_json "mongoh_find_all" self.ptr [query] . asList

    # JSON -> Maybe JSON
    # returns any document in collection that matches given query or Nothing if there is no match
    def findOne query:
        mongoh_json "mongoh_find_one" self.ptr [query] . asList.head

    # JSON -> Cursor
    def find query:
        withStringCArg query queryC:
            cursorPtr = callMongohReturningPointer "mongoh_find" [self.ptr.toCArg, queryC]
            cursorFromPointer cursorPtr

    # JSON -> Int
    # deletes at most one document matching the query
    # retuns deleted documents count (0-1)
    def deleteOne query:
        mongoh_json "mongoh_delete_one" self.ptr [query] . getInt "deletedCount"

    # JSON -> Int
    # deletes at most one document matching the query
    # retuns deleted documents count (0-1)
    def deleteMany query:
        mongoh_json "mongoh_delete_many" self.ptr [query] . getInt "deletedCount"

    def command commandJSON:
        result = singleStringMethod self.ptr (Pointer CChar) (mongoh "collectionSimpleCommand") commandJSON.toText
        case result.isNull of 
            True: reportError
            False: JSON.parse (consumeBsonStringToText result.ptr)

    def distinct key maybeQuery:
        commandMap0 = Tip.insert "distinct" (JSONString self.name) . insert "key" (JSONString key)
        commandMap1 = case maybeQuery of
            Just query: commandMap0.insert "query" query
            Nothing: commandMap0
        result = self.command (JSONObject commandMap1)
        result.get "values" . asList

    def rename newDatabaseName newCollectionName dropTargetPolicy:
        withStringCArg newDatabaseName newDatabaseNameC:
            withStringCArg newCollectionName newCollectionNameC:
                callMongohReturningTrue "mongoh_collection_rename" [self.ptr.toCArg, newDatabaseNameC, newCollectionNameC, dropTargetPolicy.toCArg]
        

