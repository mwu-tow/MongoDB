import Std.Base
import Std.Foreign
import Std.Foreign.C.Value

import MongoDB.Utils

# Pointer None -> Cursor
def cursorFromPointer ptr:
    mongoc_cursor_destroy = mongoc "mongoc_cursor_destroy"
    case ptr.isNull of 
        True: throw "expected cursor pointer is nullptr"
        False: 
            Cursor (managedPtr mongoc_cursor_destroy ptr)
    
class Cursor:
    ptr :: ManagedPointer None

    def toCArg: self.ptr.toCArg

    def batchSize:
        mongoc "mongoc_cursor_get_batch_size" . call CUInt32 [self.toCArg] . toInt
    def clone:
        clonedPtr = mongoc "mongoc_cursor_clone" . call (Pointer None) [self.toCArg]
        cursorFromPointer clonedPtr
    def current:
        callMongohReturningConsumableMaybeJsonText "mongoh_cursor_current" [self.toCArg]
    def error:
        result = (mongoh "mongoh_cursor_error" . call (Pointer CChar) [self.toCArg]).ptr
        if result.isNull then Nothing else Just (readTextUnownedFromCStr result)
    def id:
        mongoc "mongoc_cursor_get_id" . call CInt64 [self.toCArg] . toInt
    def limit: 
        mongoc "mongoc_cursor_get_limit" . call CInt64 [self.toCArg] . toInt
    def next:
        callMongohReturningConsumableMaybeJsonText "mongoh_cursor_next" [self.toCArg]
    def setBatchSize size:
        mongoc "mongoc_cursor_set_batch_size" . call None [self.toCArg, CUInt32.fromInt size . toCArg]
    def setLimit newLimit:
        result = mongoc "mongoc_cursor_set_limit" . call CUInt8 [self.toCArg, CInt64.fromInt newLimit . toCArg]
        result == (CUInt8.fromInt 1)
    def toList:
        doc = self.next
        case doc of
            Nothing: []
            Just json: Prepend json self.toList

